#+LATEX_HEADER: \newenvironment{lequation}{\begin{equation}\Large}{\end{equation}}
#+OPTIONS: ^:nil
#+ATTR_LATEX: :width 5cm :options angle=90
#+TITLE: Shell 脚本入门
#+AUTHOR: 杨 睿
#+EMAIL: yangruipis@163.com
#+KEYWORDS:
#+OPTIONS: H:4 toc:t
#+OPTIONS: tex:t
#+SETUPFILE: https://gitee.com/yangruigit/my_blogs/raw/master/lib/theme-readtheorg.setup
#+HTML_HEAD: <link rel="shortcut icon" type="image/x-icon" href="https://gitee.com/yangruigit/my_blogs/raw/master/favicon.ico">
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+html: <div align="right">
#+html: <a href="javascript:history.back()">返回</a>
#+html: </div>


* 关于 shell

- shell 不是一堆 bash 命令的集合
- shell 是一个脚本语言，类似 python， 充当浇水

* 如何解决 90% 的问题

参考：[[https://zhuanlan.zhihu.com/p/264346586][一篇教会你写90%的shell脚本]]


* 常用函数

** 日志

#+BEGIN_SRC shell
    LOG_INFO() {
        set +x
        local msg=$*
        printf '[\033[1;32mINFO \033[0m]'
        printf '[\033[0;34m%-s\033[0m]' "$(date +'%Y-%m-%d %H:%M:%S')"
        printf '[\033[0;32m%-s:%d\033[0m]' "$0" "$LINENO"
        printf ' %-s\n' "${msg}"
        [[ ${DEBUG_MODE} -gt 0 ]] && set -x || set +x
    }


    LOG_WARNING() {
        set +x
        local msg=$*
        printf '[\033[1;33mWARN \033[0m]'
        printf '[\033[0;34m%-s\033[0m]' "$(date +'%Y-%m-%d %H:%M:%S')"
        printf '[\033[0;33m%-s:%d\033[0m]' "$0" "$LINENO"
        printf ' %-s\n' "${msg}"
        [[ ${DEBUG_MODE} -gt 0 ]] && set -x || set +x
    }


    LOG_ERROR() {
        set +x
        local msg=$*
        printf '[\033[1;31mERROR\033[0m]'
        printf '[\033[0;34m%-s\033[0m]' "$(date +'%Y-%m-%d %H:%M:%S')"
        printf '[\033[0;31m%-s:%d\033[0m]' "$0" "$LINENO"
        printf ' %-s\n' "${msg}"
        [[ ${DEBUG_MODE} -gt 0 ]] && set -x || set +x
    }

  LOG_INFO "this is an info"
  LOG_WARNING "this is a warning"
  LOG_ERROR "this is an error"
#+END_SRC


效果：

[[../../assets/img/02_tech_shell_log_image.jpg]]

* 常用操作

** 参数

- 函数入参取值 :: =$N=
- 函数入参取全部 :: =$*= ，空格分割
- 函数入参偏移 :: =shift N= 偏移后取全部取的是偏移后的值，类似 python *args
- 取入参数目 :: =$#=
- 取shell内最近一个线程执行状态 :: =$?=
- 取shell内最近一个线程的线程号 :: =$!=


** 异常捕捉

- 通过 =||= 或 =&&= 实现异常捕捉
  #+BEGIN_SRC shell
  echo ${input} || exit ${EXIT_INPUT_ERROR}
  #+END_SRC
  - 高级一点的方式，统计失败个数
    #+BEGIN_SRC shell
      FAIL_COUNT=0
      echo ${input} || let "FAIL_COUNT+=1"
    #+END_SRC
- 通过 =trap= 异常捕捉[fn:trap]
  

[fn:trap] https://man.linuxde.net/trap
